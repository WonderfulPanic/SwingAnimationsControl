buildscript{
	repositories{
		maven{
			url='https://maven.minecraftforge.net/'
		}
		maven{
			url="https://repo.spongepowered.org/maven"
		}
		mavenCentral()
	}
	dependencies{
		classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
		classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
	}
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
version='1.0'
group='wonderfulpanic.swinganimationscontrol'
archivesBaseName='SwingAnimationsControl'
// Need this here so eclipse task generates correctly.
sourceCompatibility='1.8'
targetCompatibility='1.8'
compileJava.sourceCompatibility='1.8'
compileJava.targetCompatibility='1.8' 
minecraft{
	// The mappings can be changed at any time, and must be in the following format.
	// snapshot_YYYYMMDD   Snapshot are built nightly.
	// stable_#            Stables are built at the discretion of the MCP team.
	// Use non-default mappings at your own risk. they may not always work.
	// Simply re-run your setup task after changing the mappings to update your workspace.
	//mappings channel: 'snapshot', version: '20171003-1.12'
	mappings channel: 'snapshot', version: '20171003-1.12'
	// makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}
repositories{
	maven{
		url='https://repo.spongepowered.org/maven'
	}
}
configurations{
	embed
	compile.extendsFrom(embed)
}
dependencies{
	// Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
	// that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
	// The userdev artifact is a special name and will get all sorts of transformations applied to it.
	minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
	embed('org.spongepowered:mixin:0.8.3'){
		exclude module: 'guava'
		exclude module: 'commons-io'
		exclude module: 'gson'
	}
	// You may put jars on which you depend on in ./libs or you may define them like so..
	// compile "some.group:artifact:version:classifier"
	// compile "some.group:artifact:version"
	
	// Real examples
	// compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
	// compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env
	
	// The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
	// provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'
	
	// These dependencies get remapped to your current MCP mappings
	// deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'
	
	// For more info...
	// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
	// http://www.gradle.org/docs/current/userguide/dependency_management.html
}
configurations.all{
	resolutionStrategy{
		cacheChangingModulesFor 0,'seconds'
	}
}
mixin{
	add sourceSets.main,"mixins.swinganimationscontrol.refmap.json"
}
jar{
	from{
		configurations.embed.collect{
			it.isDirectory()?it:zipTree(it)
		}
	}{
		exclude "LICENSE.txt","META-INF/MANIFSET.MF","META-INF/maven/**","META-INF/*.RSA","META-INF/*.SF"
	}
	manifest{
		attributes([
			"Specification-Title": "swinganimationscontrol",
			"Specification-Vendor": "wonderfulpanic",
			"Specification-Version": "1",
			"Implementation-Title": project.name,
			"Implementation-Version": project.version,
			"Implementation-Title": project.name,
			"Implementation-Version": "${version}",
			"Implementation-Vendor": "wonderfulpanic",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			"TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
			"MixinConfigs": "mixins.swinganimationscontrol.json",
			"FMLCorePlugin": "wonderfulpanic.swinganimationscontrol.CoreMod",
			"FMLCorePluginContainsFMLMod": "true",
			"ForceLoadAsMod": "true"
		])
	}
}
jar.finalizedBy('reobfJar') 
